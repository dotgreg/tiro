{
	"version": "https://jsonfeed.org/version/1.1",
	"title": "Tiro Notes Blog",
	"language": "en",
	"home_page_url": "https://tiro-notes.org/blog/blog",
	"feed_url": "https://tiro-notes.org/blog/feed/feed.json",
	"description": "Tiro Notes Blog and Devlog",
	"author": {
		"name": "Grégoire Thiébault",
		"url": "https://github.com/dotgreg"
	},
	"items": [
		{
			"id": "https://tiro-notes.org/blog/devlog/2023/06/improving-productivity-omnibox-history.html",
			"url": "https://tiro-notes.org/blog/devlog/2023/06/improving-productivity-omnibox-history.html",
			"title": "Improving productivity with the new Omnibox History",
			"content_html": "<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/wgpV1wfqrnA\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe>\n<h3 id=\"a-note-tags-alternative\" tabindex=\"-1\">A Note tags alternative <a class=\"header-anchor\" href=\"https://tiro-notes.org/blog/devlog/2023/06/improving-productivity-omnibox-history.html\">#</a></h3>\n<p>I rely on Tiro Notes for task management and quick access to information, utilizing the fast ripgrep file search system. However, as a simple markdown-based system without a database, implementing relational features like tags is challenging without complicating the architecture.</p>\n<h3 id=\"use-case-1-merged-global-todo-list-from-different-files-projects\" tabindex=\"-1\">Use case 1: Merged global todo list from different files/projects <a class=\"header-anchor\" href=\"https://tiro-notes.org/blog/devlog/2023/06/improving-productivity-omnibox-history.html\">#</a></h3>\n<p>Managing multiple projects simultaneously requires specific follow-up and individual project-based to-do lists.\nInitially, I created a consolidated to-do list in a separate file, but it was a tedious manual process. To simplify this, I developed and utilized the omnibar search functionality. Now, I can search for <code>- [ ]</code> in my <code>notes_folder/work/project_folder</code> for a project-specific consolidated to-do list or in &quot;notes_folder/work&quot; for an overall consolidated to-do list.</p>\n<p>Additionally, I enhanced my to-do tag system with other &quot;fields&quot; such as <code>- [ ] #i3 #h1</code> indicating task importance (#i3) and energy/difficulty level (#h1). In the morning, searching for <code>#i3</code> in <code>notes_folder/work</code> provides me with a list of the most urgent tasks.</p>\n<p><img src=\"https://github.com/dotgreg/tiro-notes/assets/2981891/43fef211-8dc5-492a-9509-2010fc54a54d\" alt=\"image\"></p>\n<p>If I'm not in the mood for energy-intensive tasks, I can further filter by #h1 or #h2 tasks.\n<img src=\"https://github.com/dotgreg/tiro-notes/assets/2981891/e5ab13a0-788c-433f-baf4-bdde9a1a3dbc\" alt=\"image\"></p>\n<h3 id=\"use-case-2-grocery-price-database\" tabindex=\"-1\">Use case 2: Grocery price database <a class=\"header-anchor\" href=\"https://tiro-notes.org/blog/devlog/2023/06/improving-productivity-omnibox-history.html\">#</a></h3>\n<p>With rising inflation in Europe, I like comparing current grocery prices with those I previously paid. So I maintain a &quot;grocery to-do feed&quot; note with the following structure:</p>\n<p><img src=\"https://github.com/dotgreg/tiro-notes/assets/2981891/d64340b8-47a0-40d8-9d18-682181d59918\" alt=\"image\"></p>\n<p>To simplify, I note the price per kg next to cheap and good products using the shorthand <code>'px</code> (price in French). Now, if I want to compare prices with my previous purchases, I can use the Tiro mobile omnibox, type 'px, and find the desired result in the list.</p>\n<p><img src=\"https://github.com/dotgreg/tiro-notes/assets/2981891/8d328d1f-10f1-4026-b513-ede33fe829b9\" alt=\"image\"></p>\n<h3 id=\"but-the-user-experience-requires-too-many-keystrokes\" tabindex=\"-1\">... but the user experience requires too many keystrokes <a class=\"header-anchor\" href=\"https://tiro-notes.org/blog/devlog/2023/06/improving-productivity-omnibox-history.html\">#</a></h3>\n<p>While happy with the system's ability to turn any markdown note into a relational database using files, I encountered a UX issue: Typing numerous keystrokes to access searches became frustrating. For example, the process to search for important work tasks on desktop is as follows:</p>\n<p><code>- Navigate to the desired work folder =&gt; cmd + space (open omnibar) =&gt; 3 keystrokes for &quot;#i3&quot; =&gt; press enter</code></p>\n<p>Since I frequently use this request, I wanted an easily accessible way to reuse it.</p>\n<h3 id=\"introducing-omnibox-search-history\" tabindex=\"-1\">Introducing Omnibox search history <a class=\"header-anchor\" href=\"https://tiro-notes.org/blog/devlog/2023/06/improving-productivity-omnibox-history.html\">#</a></h3>\n<p>The new Omnibox History functionality logs your search requests. To access the log, simply type <code>&quot;,&quot;</code> within the omnibox.</p>\n<p><img src=\"https://github.com/dotgreg/tiro-notes/assets/2981891/287ed15f-610f-4d9f-bdae-79cba61cab96\" alt=\"image\"></p>\n<p>This reduces the keystrokes required to retrieve the important work to-do list to a minimum, eliminating the frustration of returning to the request:</p>\n<ul>\n<li>Previously: <code>Navigate to the desired work folder =&gt; cmd + space (open omnibar) =&gt; 3 keystrokes for &quot;#i3&quot; =&gt; press enter</code></li>\n<li>Now: <code>cmd + space (open omnibar) =&gt; &quot;,&quot; =&gt; &quot;enter&quot; (most of the time, to retrieve the last request)</code></li>\n</ul>\n<h3 id=\"possibilities\" tabindex=\"-1\">Possibilities <a class=\"header-anchor\" href=\"https://tiro-notes.org/blog/devlog/2023/06/improving-productivity-omnibox-history.html\">#</a></h3>\n<p>A relational system in a note application like Tiro Notes offers numerous interesting use cases: Some additional uses I've explored include maintaining lists of things to watch/read. By adding &quot;text tags&quot; next to each item, I can filter them according to my mood.</p>\n<p>You can test it by downloading Tiro Notes from the command line <code>npx tiro-notes@0.30.99.51</code></p>\n",
			"date_published": "2023-06-28T00:00:00Z"
		}
		,
		{
			"id": "https://tiro-notes.org/blog/devlog/2023/06/agnostic-ai-assistant-into-tiro-notes.html",
			"url": "https://tiro-notes.org/blog/devlog/2023/06/agnostic-ai-assistant-into-tiro-notes.html",
			"title": "An agnostic AI assistant into Tiro Notes",
			"content_html": "<p>One of the most interesting features that I wanted to implement in Tiro is the idea of having an AI assistant available on mobile and desktop.</p>\n<video width=\"100%\" controls=\"\" autoplay=\"\" loop=\"\" muted=\"\" markdown=\"1\">\n\t<source src=\"https://github.com/dotgreg/tiro-notes/assets/2981891/dd42b4e3-f044-4c2e-a83d-3eb7fc9cf798\" type=\"video/mp4\" markdown=\"1\">\n</video>\n<p><em>Final result, you can test it using the command line <code>npx tiro-notes@0.30.99.12</code></em></p>\n<h2 id=\"user-experience\" tabindex=\"-1\">User experience <a class=\"header-anchor\" href=\"https://tiro-notes.org/blog/devlog/2023/06/agnostic-ai-assistant-into-tiro-notes.html\">#</a></h2>\n<p>The main problem I saw with current solutions was the friction between the writing process and the AI assistance at the user experience level. I don't use AI assistants because of that friction required to use them (Opening a new tab, copy/pasting text 2 times etc.). It creates a certain level of steps under which I'd just rather use search engines or do it myself.</p>\n<p>My first attempt was to add an AI assistant throught command line using the Tiro command line manager custom tag called Commander, but I quickly realized that the integration still required too much steps to be usable in real-life scenarios, especially the copy/pasting part which is really tedious on mobile. So I gave up in using AI assistance inside Tiro that way.</p>\n<img width=\"40%\" src=\"https://github.com/dotgreg/tiro-notes/assets/2981891/5c9cb665-7dd3-46c7-a8e0-647a88c93ea9\">\n<p><em>Initial AI integration attempt using the commander custom tag</em></p>\n<p>My second attempt, which I will describe here, was to get as close as possible to the user experience offered by Microsoft's Copilot or Notion's AI system.</p>\n<p>The goal was to reduce the number of steps needed to get an answer:</p>\n<ul>\n<li>Write the question in Tiro Notes</li>\n<li>Select the text of the question</li>\n<li>Immediately obtain an AI-generated response in the note</li>\n</ul>\n<p>The objective is also to respect a certain open source philosophy by offering the choice to users to use different AI engines, including open source ones in the future. The solution is designed to be easily interchangeable from the user settings.</p>\n<img width=\"70%\" src=\"https://github.com/dotgreg/tiro-notes/assets/2981891/b6124b31-a6ca-41ab-9e3e-bcd8d298ef8e\">\n<p><em>New settings options for AI assistant. The AI system used can be modified</em></p>\n<h2 id=\"technical-implementation\" tabindex=\"-1\">Technical implementation <a class=\"header-anchor\" href=\"https://tiro-notes.org/blog/devlog/2023/06/agnostic-ai-assistant-into-tiro-notes.html\">#</a></h2>\n<p>On the coding side, it happened to be quite easy to implement it.\nThe main logic was :</p>\n<ul>\n<li>User select a part of the text</li>\n<li>A small popup appears suggesting AI assistance</li>\n<li>If clicked, the selected text is sent to Tiro Notes backend that executes a configurable command line with it as a parameter</li>\n<li>The answer is then sent back to the active note, below the question</li>\n<li>As for ChatGPT, the answer is not sent once but streamed (almost word by word), I had to create a new api function <code>api.command.stream</code></li>\n</ul>\n<p>The code is visible at that <a href=\"https://github.com/dotgreg/tiro-notes/blob/4d4a845c15aa53b6e59830f4268445e9f96c09bb/client/src/components/dualView/CodeMirrorEditor.component.tsx#L386/\">link</a>, I will probably refactor it latest to its own manager file</p>\n<p>I am using two api functions:</p>\n<ul>\n<li>\n<p>the newly created  <code>api.command.stream(cmd, streamChunk =&gt; { })</code> to execute the command on Tiro Notes backend. That function sends from the react client frontend a command line to the node.js backend, which executes it using the library execa. Details of the backend function used can be checked at that <a href=\"https://github.com/dotgreg/tiro-notes/blob/4d4a845c15aa53b6e59830f4268445e9f96c09bb/server/src/managers/exec.manager.ts\">link</a></p>\n</li>\n<li>\n<p>api.file.saveContent(p.file.path, nText) to save the note regularly</p>\n</li>\n</ul>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token function\">getApi</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">api</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> cmd <span class=\"token operator\">=</span> api<span class=\"token punctuation\">.</span>userSettings<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ui_editor_ai_command\"</span><span class=\"token punctuation\">)</span>\n  cmd <span class=\"token operator\">=</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> selectionTxt<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">genTextAt</span><span class=\"token punctuation\">(</span><span class=\"token function\">genParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  api<span class=\"token punctuation\">.</span>command<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">,</span> <span class=\"token parameter\">streamChunk</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>streamChunk<span class=\"token punctuation\">.</span>isError<span class=\"token punctuation\">)</span> isError <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token comment\">// if it is an error, display it in a popup</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      api<span class=\"token punctuation\">.</span>ui<span class=\"token punctuation\">.</span>notification<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[AI] Error from CLI &lt;br/> \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>cmd<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" &lt;br/>=> &lt;br/></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>streamChunk<span class=\"token punctuation\">.</span>text<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">hideAfter</span><span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">genTextAt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token function\">genParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">textUpdate</span><span class=\"token operator\">:</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">isLast</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// else insert it</span>\n      <span class=\"token function\">genTextAt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token function\">genParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">textUpdate</span><span class=\"token operator\">:</span>streamChunk<span class=\"token punctuation\">.</span>textTot<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">isLast</span><span class=\"token operator\">:</span> streamChunk<span class=\"token punctuation\">.</span>isLast<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>You can test that AI assistant by downloading Tiro Notes from the command line <code>npx tiro-notes@0.30.99.12</code></p>\n",
			"date_published": "2023-06-11T00:00:00Z"
		}
		,
		{
			"id": "https://tiro-notes.org/blog/devlog/2023/06/hello-world-devlog.html",
			"url": "https://tiro-notes.org/blog/devlog/2023/06/hello-world-devlog.html",
			"title": "Hello World Devlog",
			"content_html": "<p>I feel the need to document Tiro Notes' development journey in a single place.</p>\n<p>The purpose of this blog is to provide information on:</p>\n<ul>\n<li>Updates and changes happening in Tiro Notes</li>\n<li>Features and experiments being developed</li>\n<li>Guides on how to use Tiro Notes.</li>\n</ul>\n",
			"date_published": "2023-06-10T00:00:00Z"
		}
		
	]
}
